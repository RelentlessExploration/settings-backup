{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  "Typescript React PureComponent": {
    "prefix": "rpc",
    "body": [
      "import * as React from 'react'",
      "",
      "export class $1 extends React.PureComponent {",
      "\trender() {",
      "\t\treturn ($2);",
      "}}"
    ],
    "description": "Typescript React PureComponent"
  },

  "Twind": {
    "prefix": "cc",
    "body": ["className={tw`$1`}"],
    "description": "Twind"
  },

  "Typescript React Function Component": {
    "prefix": "rh",
    "body": [
      "import { FC } from 'react'",
      "",
      "interface ${TM_FILENAME_BASE}Props {",
      "$1",
      "}",
      "",
      "export const $TM_FILENAME_BASE: FC<${TM_FILENAME_BASE}Props> = ({$2}) => {",
      "  return (",
      "    <div>",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Typescript React Function Component"
  },
  "React Native StyleSheet": {
    "prefix": "rnss",
    "body": [
      "import {StyleSheet} from 'react-native'",
      "const styles = StyleSheet.create({",
      "",
      "});"
    ],
    "description": "React Native StyleSheet"
  },
  "Toggle State": {
    "prefix": "tog",
    "body": ["this.setState(state => ({", "\topen: !state.open", "}));"],
    "description": "toggle state"
  },
  "console.log": {
    "prefix": "cl",
    "body": ["console.log($1)"],
    "description": "console.log"
  },
  "className={classnames()}": {
    "prefix": "cc",
    "body": ["className={classnames('$1')}"],
    "description": "tailwind react stuff"
  },
  "NextJS page": {
    "prefix": "np",
    "body": [
      "import { NextPage } from \"next\";\n",
      "const $1: NextPage = () => {",
      "  return <></>;",
      "}\n",
      "export default $1"
    ],
    "description": "TypeScript NextJS Page"
  },
  "React Context": {
    "prefix": "reactContext",
    "body": [
      "import React, { useContext } from \"react\";",
      "",
      "interface $1ContextType {};",
      "const $1Context = React.createContext<$1ContextType>({});",
      "",
      "export const use$1 = () => {",
      "  return useContext($1Context);",
      "};",
      "",
      "export const $1Provider: React.FC = ({ children }) => {",
      "  const value: $1ContextType = {};",
      "  return <$1Context.Provider value={value}>{children}</$1Context.Provider>;",
      "};"
    ]
  },
  "Next.js SVG Component": {
    "prefix": "nextSvg",
    "body": [
      "import { FC, SVGProps } from \"react\";",
      "",
      "const ${TM_FILENAME_BASE}:FC<SVGProps<SVGSVGElement>> = props => {",
      "  return (",
      "    ",
      "  );",
      "}",
      "",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": "TypeScript NextJS SVG Component"
  },
  "Typescript react storybook": {
    "prefix": "tsstory",
    "body": [
      "import { ComponentStory, ComponentMeta } from \"@storybook/react\";",
      "",
      "export default {",
      "  title: \"dragontail/$1\",",
      "  component: $2,",
      "} as ComponentMeta<typeof $2>;",
      "",
      "const $1Template: ComponentStory<typeof $2> = ({ ...args }) => (",
      "  $3",
      ");"
    ]
  }
}
